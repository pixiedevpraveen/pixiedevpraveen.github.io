var router; let baseURL = "https://praveenyadav.herokuapp.com"; const store = PetiteVue.reactive({ state: { online: !0, render: !1, count: 0, app: { showNavbar: !1, message: { show: !1, desc: "Welcome" }, sidebar: { activeTabId: 3, search: { show: !1, query: "", data: {} }, popular: { show: !1, data: null }, recent: { show: !1, data: null } } }, updatedAt: null }, setters: { online(a) { store.state.online = a }, setCount(a) { store.state.count = a }, toggleMsg: (a = null) => (null == a ? store.state.app.message.show = !store.state.app.message.show : store.state.app.message.show = a, store.state.app.message.show), setMsg(a = null) { null != a && (store.state.app.message.desc = a), this.toggleMsg(!0), setTimeout(() => { this.toggleMsg(!1) }, 5e3) }, setSearchData(a) { store.state.app.sidebar.search.data = a }, setSearchQuery(a) { store.state.app.sidebar.search.query = a }, setPopularData(a) { store.state.app.sidebar.popular.data = a }, setRecentData(a) { store.state.app.sidebar.recent.data = a } }, getter: { history: { show: !1, data: [] }, count(a) { store.state.count = a }, msg: () => store.state.app.message.desc, searchData: () => store.state.app.sidebar.search.data, searchQuery: () => store.state.app.sidebar.search.query, popularData: () => store.state.app.sidebar.popular.data, recentData: () => store.state.app.sidebar.recent.data }, methods: { updateHistory() { store.getter.history.show = !1; let a = []; localStorage.blogHistory && "" != localStorage.blogHistory && (a = JSON.parse(localStorage.blogHistory)), a || (a = [{ title: "Read any post to see history", url: "/blog/" }]), store.getter.history.show = !0, store.getter.history.data = a }, test() { alert("hello") }, app: { loading: !1, startLoading() { this.loading = !0 }, floatMenu: !1, toggleFloatMenu() { this.floatMenu = !this.floatMenu }, blinkLoading() { this.loading = !0, setTimeout(() => { this.loading = !1 }, 1e3) }, stopLoading() { this.loading = !1 }, closePopup() { this.floatMenu = !1 }, sidebar: { search: { async get() { let a = !1; localStorage.query == store.getter.searchQuery() && store.getter.searchData()?.result?.length && (a = !0, 1) || (store.getter.searchQuery().length > 1 && await axios.get(baseURL + "/api/search/", { params: { search: store.getter.searchQuery() } }).then(b => { console.log(b.data), 200 == b.data.status && (b.data.result.length ? (store.setters.setMsg("Found " + b.data.result.length + " posts with this keyword"), a = !0, store.setters.setSearchData(b.data), localStorage.query = store.state.app.sidebar.search.query = b.data.query) : store.setters.setMsg("Found no posts with this keyword")), store.setters.setMsg("No Posts found with this keyword") }), store.state.app.sidebar.search.show = a) } }, popular: { async get() { store.state.app.sidebar.popular.show || await axios.get(baseURL + "/api/search/", { params: { search: "POPULAR" } }).then(a => { 200 == a.data.status && a.data.result.length && (store.state.app.sidebar.popular.show = !0, store.setters.setPopularData(a.data.result)) }) } }, recent: { async get() { store.state.app.sidebar.recent.show || await axios.get(baseURL + "/api/search/", { params: { search: "RECENT" } }).then(a => { 200 == a.data.status && a.data.result.length && (store.state.app.sidebar.recent.show = !0, store.setters.setRecentData(a.data.result)) }) } } }, contact: { name: "", email: "", phone: "", desc: "", clear() { this.name = this.email = this.phone = this.desc = "" }, sendContact() { store.setters.setMsg("Contact page is in development!"), this.clear() } } }, increment() { store.state.count++, store.saveState() }, toggleNavbar() { store.state.app.showNavbar = !store.state.app.showNavbar, document.querySelector(".navbar .navbar-collapse").classList.toggle("show"); let a = document.getElementById("navbar-toggle-more"); a.innerText = "More" === a.innerText ? "Close" : "More" } }, setter() { return this.state.updatedAt = Date(), setTimeout(() => { this.saveState() }, 500), this.setters }, method() { return this.state.updatedAt = Date(), setTimeout(() => { this.saveState() }, 500), this.methods }, saveState() { this.state.updatedAt = Date(), sessionStorage.storeState = JSON.stringify(this.state) }, getState(a) { this.state = a }, syncState() { if (store.method().app.startLoading(), sessionStorage.storeState) { let a = JSON.parse(sessionStorage.storeState); Math.floor(new Date().getTime() - new Date(a.updatedAt).getTime()) / 6e4 < 2 ? this.getState(a) : this.saveState() } setTimeout(() => { store.method().app.stopLoading() }, 100) } }); store.syncState(), window.addEventListener("offline", a => { store.setters.online(!1), store.methods.app.blinkLoading() }), window.addEventListener("online", a => { store.setters.online(!0), store.methods.app.blinkLoading() }), PetiteVue.createApp({ $delimiters: ["{", "}"], store }).mount("#prApp"); const orc = { _data: new Map, add(a, b) { this._data.set(a, b) }, call(a) { this._data.get(a).call() }, callAll() { this._data.forEach(a => { a.call() }) } }; async function setMainData(a) { let b; return document.getElementById("startLoading").click(), await axios.get(baseURL + a, { params: { type: "api" } }).then(a => { document.getElementById("main").innerHTML = a.data.html, document.title = a.data.data.meta.title + " | " + document.title.split(" | ").slice(-1)[0], document.getElementsByTagName("meta").description.content = a.data.data.meta.description, document.getElementsByTagName("meta").keywords.content = a.data.data.meta.keywords, b = a.data.data.meta.title }).catch(a => console.log(error)), document.getElementById("saveState").click(), document.getElementById("stopLoading").click(), b } function closeNavbar() { var a = document.querySelector("#navbar-toggle-more"); "Close" == a.innerText && a.click() } function focusMain() { window.scroll({ top: 0, left: 0, behavior: "smooth" }) } function addHistory(b, c) { let a = []; localStorage.blogHistory && "" != localStorage.blogHistory && (a = JSON.parse(localStorage.blogHistory)), a && a.length > 4 && (a = a.slice(-4)), a.push({ title: b, url: c }); let d = new Set; a.forEach(a => { d.add(JSON.stringify(a)) }), a = [], d.forEach(b => { a.push(JSON.parse(b)) }), localStorage.blogHistory = JSON.stringify(a), document.querySelector("#updateHistory").click() } function createRouter() { router = new Router({ mode: "history", page404: function (a) { console.log('"/' + a + '" Page not found') } }), ["", "/blog/", "/about/", "/portfolio/"].forEach(a => { router.add(a, function () { setMainData(a) }) }), router.add("/blog/(:any)/", function (a) { setMainData(a = "/blog/" + a + "/"), setTimeout(() => { addHistory(document.getElementById("post-title").innerText, a) }, 1e3) }), router.add("/test/(:word)/", function (a) { console.log(a) }), document.querySelector("#prApp").addEventListener("click", a => { if (a.target.classList.contains("router-link") || a.target.parentNode.classList.contains("router-link")) { a.preventDefault(); var b = ""; b = a.target.classList.contains("router-link") ? a.target.attributes.href.value : a.target.parentNode.attributes.href.value, router.navigateTo(b), closeNavbar(), focusMain() } }), router.addUriListener() } function init() { document.querySelectorAll("a.home-link").forEach(a => { let b = window.location.host; a.href = b, a.innerText = b }) } function atLoad() { setTimeout(() => { createRouter(), router.navigateTo(window.location.pathname) }, 100), init() } window.onload = atLoad, orc.add("a", function () { console.log("hello") })